"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[580],{6973:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var s=r(4848),i=r(8453);const c={},o="Linux Configuration",a={id:"run-node/linux_configuration",title:"Linux Configuration",description:"Running the node via service file",source:"@site/docs/run-node/linux_configuration.md",sourceDirName:"run-node",slug:"/run-node/linux_configuration",permalink:"/docs/run-node/linux_configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/QuilibriumNetwork/docs/tree/main/docs/run-node/linux_configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"run",previous:{title:"Advanced Node Management",permalink:"/docs/run-node/advanced-node-management"}},t={},l=[{value:"Running the node via service file",id:"running-the-node-via-service-file",level:2},{value:"Useful node commands",id:"useful-node-commands",level:2},{value:"Service commands",id:"service-commands",level:3},{value:"General Linux commands",id:"general-linux-commands",level:3}];function d(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"linux-configuration",children:"Linux Configuration"})}),"\n",(0,s.jsx)(n.h2,{id:"running-the-node-via-service-file",children:"Running the node via service file"}),"\n",(0,s.jsxs)(n.p,{children:["To run your node via ",(0,s.jsx)(n.code,{children:"systemd"}),", create the service file and open it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nano /lib/systemd/system/ceremonyclient.service\n"})}),"\n",(0,s.jsx)(n.p,{children:'Paste the below code (If your working directory is different from "root" than edit the code accordingly):'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"[Unit]\nDescription=Ceremony Client Go App Service\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5s\nWorkingDirectory=/root/ceremonyclient/node\nExecStart=/root/ceremonyclient/node/release_autorun.sh\n\n[Install]\nWantedBy=multi-user.target\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Save the file, exit and enable the service:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload && sudo systemctl enable ceremonyclient\n"})}),"\n",(0,s.jsx)(n.p,{children:"Start the node"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"service ceremonyclient start\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now the node will start automaytically after each reboot. The service uses the release_autorun.sh script, so it will also periodically check for new releases."}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer to run the node directly via binary, you can simply change the ",(0,s.jsx)(n.em,{children:"ExecStart"})," line of the service file and use the correct binary file name there."]}),"\n",(0,s.jsx)(n.h2,{id:"useful-node-commands",children:"Useful node commands"}),"\n",(0,s.jsx)(n.h3,{id:"service-commands",children:"Service commands"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"The below commands will work when running a node via service file"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Start service"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"service ceremonyclient start\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stop service"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"service ceremonyclient stop\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Restart service"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"service ceremonyclient restart\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Node log"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo journalctl -u ceremonyclient.service -f --no-hostname -o cat\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Node version"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'journalctl -u ceremonyclient -r --no-hostname  -n 1 -g "Quilibrium Node" -o cat\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Service status"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"service ceremonyclient status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"general-linux-commands",children:"General Linux commands"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Change the NODE_DIR variable according to your needs"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Get your peerID"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'NODE_DIR="$HOME/ceremonyclient/node"\nNODE_BINARY=$(find "$NODE_DIR" -type f -executable -name "node-*" ! -name "*.dgst*" ! -name "*.sig*" | sort -V | tail -n 1 | xargs basename)\ncd "$HOME/ceremonyclient/node" && ./$NODE_BINARY -peer-id\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"See node info"}),(0,s.jsx)(n.br,{}),"\n","PeerID - Version - Max frame - Balance ",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.em,{children:"This can give an error on nodes that are not fully sync, but you will still see your peerID"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'NODE_DIR="$HOME/ceremonyclient/node"\nNODE_BINARY=$(find "$NODE_DIR" -type f -executable -name "node-*" ! -name "*.dgst*" ! -name "*.sig*" | sort -V | tail -n 1 | xargs basename)\ncd "$HOME/ceremonyclient/node" && ./$NODE_BINARY -node-info\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Check balance"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'NODE_DIR="$HOME/ceremonyclient/node"\nNODE_BINARY=$(find "$NODE_DIR" -type f -executable -name "node-*" ! -name "*.dgst*" ! -name "*.sig*" | sort -V | tail -n 1 | xargs basename)\ncd "$HOME/ceremonyclient/node" && ./$NODE_BINARY -balance\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const i={},c=s.createContext(i);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);